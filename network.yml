Description: CD12352 - Infrastructure as Code Project - Network

Parameters:
  EnvironmentName:
    Description: "An environment name that will be prefixed to the resources name and also the exports name"
    Type: String
    Default: ""

  VpcCIDR:
    Description: "VPC CIDR block"
    Type: String
    Default: ""

  PublicSubnet1CIDR:
    Description: "Public subnet CIDR block for the Availability Zone 1"
    Type: String
    Default: ""

  PublicSubnet2CIDR:
    Description: "Public subnet CIDR block for the Availability Zone 2"
    Type: String
    Default: ""

  PrivateSubnet1CIDR:
    Description: "Private subnet CIDR block for the Availability Zone 1"
    Type: String
    Default: ""

  PrivateSubnet2CIDR:
    Description: "Private subnet CIDR block for the Availability Zone 2"
    Type: String
    Default: ""

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join [ "-vpc-", [ !Ref EnvironmentName, !Ref AWS::Region ]]

  # Gateway for connecting VPC to internet
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ "-internet-gateway-", [ !Ref EnvironmentName, !Ref AWS::Region ]]

  # Attaches an internet gateway, or a virtual private gateway to a VPC, enabling connectivity between the internet and the VPC
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
        InternetGatewayId:
          Ref: "InternetGateway"
        VpcId:
          Ref: "VPC"

# ------------ Availability Zone 1 -------------------
# ----------------------------------------------------

  # Public sub network
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ""
              - - !Ref EnvironmentName
                - "-public-subnet-"
                - Fn::Select:
                  - 0
                  - Fn::GetAZs:
                      Ref: "AWS::Region"

  # Private sub network
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ""
              - - !Ref EnvironmentName
                - "-private-subnet-"
                - Fn::Select:
                  - 0
                  - Fn::GetAZs:
                      Ref: "AWS::Region"
  
  # Elastic IP
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags: 
        - Key: Name
          Value:
            Fn::Join:
              - ""
              - - !Ref EnvironmentName
                - "-nat-eip-"
                - Fn::Select:
                  - 0
                  - Fn::GetAZs:
                      Ref: "AWS::Region"

  # NAT gateway
  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ""
              - - !Ref EnvironmentName
                - "-nat-gateway-"
                - Fn::Select:
                  - 0
                  - Fn::GetAZs:
                      Ref: "AWS::Region"

# ------------ Availability Zone 2 -------------------
# ----------------------------------------------------

  # Public sub network
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ""
              - - !Ref EnvironmentName
                - "-public-subnet-"
                - Fn::Select:
                  - 1
                  - Fn::GetAZs:
                      Ref: "AWS::Region"

  # Private sub network
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ""
              - - !Ref EnvironmentName
                - "-private-subnet-"
                - Fn::Select:
                  - 1
                  - Fn::GetAZs:
                      Ref: "AWS::Region"
  
  # Elastic IP
  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags: 
        - Key: Name
          Value:
            Fn::Join:
              - ""
              - - !Ref EnvironmentName
                - "-nat-eip-"
                - Fn::Select:
                  - 1
                  - Fn::GetAZs:
                      Ref: "AWS::Region"

  # NAT gateway
  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ""
              - - !Ref EnvironmentName
                - "-nat-gateway-"
                - Fn::Select:
                  - 1
                  - Fn::GetAZs:
                      Ref: "AWS::Region"

# ---------- Routing for public routes ---------
# ----------------------------------------------

  PublicRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ''
              - - !Ref EnvironmentName
                - "-public-route-table-"
                - Fn::Select:
                  - 0
                  - Fn::GetAZs:
                      Ref: "AWS::Region"

  PublicRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ''
              - - !Ref EnvironmentName
                - "-public-route-table-"
                - Fn::Select:
                  - 1
                  - Fn::GetAZs:
                      Ref: "AWS::Region"

  PublicOutboundRouteTable1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: "PublicRouteTable1"
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: "InternetGateway"

  PublicOutboundRouteTable2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: "PublicRouteTable2"
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: "InternetGateway"

  AssociationPublicSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: "PublicRouteTable1"
      SubnetId:
        Ref: "PublicSubnet1"

  AssociationPublicSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: "PublicRouteTable2"
      SubnetId:
        Ref: "PublicSubnet2"

# ---------- Routing for private routes ---------
# -----------------------------------------------
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value:
            Fn::Join:
              - ""
              - - !Ref EnvironmentName
                - "-private-route-table-"
                - Fn::Select:
                  - 0
                  - Fn::GetAZs:
                      Ref: "AWS::Region"

  PrivateOutboundRouteTable1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: "PrivateRouteTable1"
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: "NatGateway1"

  AssociationPrivateSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: "PrivateRouteTable1"
      SubnetId:
        Ref: "PrivateSubnet1"

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value:
            Fn::Join:
              - ""
              - - !Ref EnvironmentName
                - "-private-route-table-"
                - Fn::Select:
                  - 1
                  - Fn::GetAZs:
                      Ref: "AWS::Region"

  PrivateOutboundRouteTable2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: "PrivateRouteTable2"
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: "NatGateway2"

  AssociationPrivateSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: "PrivateRouteTable2"
      SubnetId:
        Ref: "PrivateSubnet2"

# ------------- Security Groups ------------
# ------------------------------------------

  # Load Balancer Security Group
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Load Balancer HTTP traffic
      GroupName: Load-balancer-security-group
      VpcId: !Ref VPC
      # Outbound
      SecurityGroupIngress:
      - IpProtocol: TCP
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      # Inbound
      SecurityGroupEgress:
      - IpProtocol: TCP
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Join [ "-lb-security-groups-", [ !Ref EnvironmentName, !Ref AWS::Region ]]

  # Application security group (EC2 Instance)
  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Application Security Group
      GroupName: Application-security-group
      VpcId: !Ref VPC
      # Inbound
      SecurityGroupIngress:
      - Description: Inbound rule to allow the Load Balancer.
        IpProtocol: TCP
        SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        FromPort: 80
        ToPort: 80
      Tags:
        - Key: Name
          Value: !Join [ "-app-security-groups-", [ !Ref EnvironmentName, !Ref AWS::Region ]]

# -------------Output ------------
# --------------------------------
Outputs:
  VPC:
    Description: "A reference to the created VPC"
    Value: !Ref VPC
    Export:
      Name: !Sub ${EnvironmentName}-vpc-id-${AWS::Region}

  PublicSubnets:
    Description: Public subnet IDs
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]
    Export:
      Name: !Sub ${EnvironmentName}-public-subnet-ids-${AWS::Region}

  PrivateSubnets:
    Description: Private subnet IDs
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]
    Export:
      Name: !Sub ${EnvironmentName}-private-subnet-ids-${AWS::Region}

  PublicSubnet1CIDR:
    Description: Public Subnet 1 CIDR
    Value: !Ref PublicSubnet1CIDR
    Export:
      Name: !Sub ${EnvironmentName}-public-subnet-1-cidr-${AWS::Region}

  PublicSubnet2CIDR:
    Description: Public Subnet 2 CIDR
    Value: !Ref PublicSubnet2CIDR
    Export:
      Name: !Sub ${EnvironmentName}-public-subnet-2-cidr-${AWS::Region}

  PublicSubnet1ID:
    Description: Public Subnet 1 ID
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${EnvironmentName}-public-subnet-1-id-${AWS::Region}

  PublicSubnet2ID:
    Description: Public Subnet 2 ID
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${EnvironmentName}-public-subnet-2-id-${AWS::Region}

  ApplicationSecurityGroup:
    Description: Applicaion security group
    Value: !Ref ApplicationSecurityGroup
    Export:
      Name: !Sub ${EnvironmentName}-app-security-group-id-${AWS::Region}

  LoadBalancerSecurityGroup:
    Description: Load balancer security group
    Value: !Ref LoadBalancerSecurityGroup
    Export:
      Name: !Sub ${EnvironmentName}-lb-security-group-id-${AWS::Region}